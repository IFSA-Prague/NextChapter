import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator, FlatList, Alert, TouchableOpacity } from 'react-native';
import { useAuth } from '../../../AuthProvider';
import {
Â Â getFirestore,
Â Â doc,
Â Â getDoc,
Â Â getDocs,
Â Â collection,
Â Â updateDoc,
Â Â arrayUnion
} from 'firebase/firestore';
import { SafeAreaView } from 'react-native-safe-area-context';

const db = getFirestore();

export default function FeedScreen({ navigation }) {
Â Â const { user } = useAuth();
Â Â const [recommendations, setRecommendations] = useState([]);
Â Â const [loading, setLoading] = useState(true);

Â Â useEffect(() => {
Â Â Â Â const fetchRecommendations = async () => {
Â Â Â Â Â Â if (!user) return;

Â Â Â Â Â Â try {
Â Â Â Â Â Â Â Â // Fetch current user's preferences
Â Â Â Â Â Â Â Â const userSnap = await getDoc(doc(db, 'users', user.uid));
Â Â Â Â Â Â Â Â const userData = userSnap.data();

Â Â Â Â Â Â Â Â // Fetch all books and bookclubs in parallel
Â Â Â Â Â Â Â Â const [booksSnap, clubsSnap] = await Promise.all([
Â Â Â Â Â Â Â Â Â Â getDocs(collection(db, 'books')),
Â Â Â Â Â Â Â Â Â Â getDocs(collection(db, 'bookclubs'))
Â Â Â Â Â Â Â Â ]);

Â Â Â Â Â Â Â Â // Build a lookup for books
Â Â Â Â Â Â Â Â const books = {};
Â Â Â Â Â Â Â Â booksSnap.forEach(doc => books[doc.id] = doc.data());

Â Â Â Â Â Â Â Â const results = [];

Â Â Â Â Â Â Â Â // Score each club based on user preferences
Â Â Â Â Â Â Â Â clubsSnap.forEach(clubDoc => {
Â Â Â Â Â Â Â Â Â Â const club = clubDoc.data();
Â Â Â Â Â Â Â Â Â Â const currentBook = books[club.currentBook];
Â Â Â Â Â Â Â Â Â Â let score = 0;

Â Â Â Â Â Â Â Â Â Â // Scoring logic
Â Â Â Â Â Â Â Â Â Â if ((userData.genrePreferences || []).some(g => club.genres?.includes(g))) score += 3;
Â Â Â Â Â Â Â Â Â Â if (currentBook) {
Â Â Â Â Â Â Â Â Â Â Â Â if ((userData.authorPreferences || []).includes(currentBook.author)) score += 2;
Â Â Â Â Â Â Â Â Â Â Â Â if (parseInt(currentBook.year) >= 2018) score += 1;
Â Â Â Â Â Â Â Â Â Â Â Â if ((userData.completedBooks || []).includes(club.currentBook)) score -= 5;
Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â Â Â if ((club.members || []).length > 5) score += 1;

Â Â Â Â Â Â Â Â Â Â // Convert raw score to a percentage match (max 10 points)
Â Â Â Â Â Â Â Â Â Â const percentage = Math.min(Math.round((score / 10) * 100), 100);

Â Â Â Â Â Â Â Â Â Â results.push({
Â Â Â Â Â Â Â Â Â Â Â Â id: clubDoc.id,
Â Â Â Â Â Â Â Â Â Â Â Â name: club.name,
Â Â Â Â Â Â Â Â Â Â Â Â score: percentage,
Â Â Â Â Â Â Â Â Â Â Â Â members: club.members || [],
Â Â Â Â Â Â Â Â Â Â Â Â currentBookTitle: currentBook?.title || 'Unknown Book',
Â Â Â Â Â Â Â Â Â Â });
Â Â Â Â Â Â Â Â });

Â Â Â Â Â Â Â Â // Sort and set top 10 recommendations
Â Â Â Â Â Â Â Â results.sort((a, b) => b.score - a.score);
Â Â Â Â Â Â Â Â setRecommendations(results.slice(0, 10));
Â Â Â Â Â Â } catch (err) {
Â Â Â Â Â Â Â Â console.error('Error generating recommendations:', err);
Â Â Â Â Â Â } finally {
Â Â Â Â Â Â Â Â setLoading(false);
Â Â Â Â Â Â }
Â Â Â Â };

Â Â Â Â fetchRecommendations();
Â Â }, [user]);

Â Â // Handler for when user taps on a club card
Â Â const handleJoinClub = async (clubId, clubName, members) => {
Â Â Â Â // Prevent joining again
Â Â Â Â if (members.includes(user.uid)) {
Â Â Â Â Â Â navigation.navigate('BookclubHomeScreen', { bookClubId: clubId });
Â Â Â Â Â Â return;
Â Â Â Â }

Â Â Â Â Alert.alert(
Â Â Â Â Â Â `Join ${clubName}?`,
Â Â Â Â Â Â 'Do you want to join this book club?',
Â Â Â Â Â Â [
Â Â Â Â Â Â Â Â { text: 'Cancel', style: 'cancel' },
Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â text: 'Yes, join',
Â Â Â Â Â Â Â Â Â Â onPress: async () => {
Â Â Â Â Â Â Â Â Â Â Â Â try {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â // 1. Add user to the club's members array
Â Â Â Â Â Â Â Â Â Â Â Â Â Â const clubRef = doc(db, 'bookclubs', clubId);
Â Â Â Â Â Â Â Â Â Â Â Â Â Â await updateDoc(clubRef, {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â members: arrayUnion(user.uid)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â });

Â Â Â Â Â Â Â Â Â Â Â Â Â Â // 2. Add clubId to user's joinedClubs array
Â Â Â Â Â Â Â Â Â Â Â Â Â Â const userRef = doc(db, 'users', user.uid);
Â Â Â Â Â Â Â Â Â Â Â Â Â Â await updateDoc(userRef, {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â joinedClubs: arrayUnion(clubId)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â });

Â Â Â Â Â Â Â Â Â Â Â Â Â Â // 3. Navigate to BookclubHomeScreen
Â Â Â Â Â Â Â Â Â Â Â Â Â Â navigation.navigate('BookclubHomeScreen', { bookClubId: clubId });
Â Â Â Â Â Â Â Â Â Â Â Â } catch (err) {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â console.error('Failed to join club:', err);
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Alert.alert('Error', 'Failed to join the club.');
Â Â Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â Â Â },
Â Â Â Â Â Â Â Â },
Â Â Â Â Â Â ],
Â Â Â Â Â Â { cancelable: true }
Â Â Â Â );
Â Â };

Â Â // Show loading spinner while fetching
Â Â if (loading) {
Â Â Â Â return (
Â Â Â Â Â Â <SafeAreaView style={styles.loadingContainer}>
Â Â Â Â Â Â Â Â <ActivityIndicator size="large" color="#6200ee" />
Â Â Â Â Â Â </SafeAreaView>
Â Â Â Â );
Â Â }

Â Â return (
Â Â Â Â <SafeAreaView style={styles.container}>
Â Â Â Â Â Â <Text style={styles.title}>Recommended Book Clubs</Text>
Â Â Â Â Â Â <FlatList
Â Â Â Â Â Â Â Â data={recommendations}
Â Â Â Â Â Â Â Â keyExtractor={(item) => item.id}
Â Â Â Â Â Â Â Â contentContainerStyle={styles.list}
Â Â Â Â Â Â Â Â renderItem={({ item }) => (
Â Â Â Â Â Â Â Â Â Â <TouchableOpacity
Â Â Â Â Â Â Â Â Â Â Â Â style={styles.card}
Â Â Â Â Â Â Â Â Â Â Â Â activeOpacity={0.85}
Â Â Â Â Â Â Â Â Â Â Â Â onPress={() => handleJoinClub(item.id, item.name, item.members)}
Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.clubName}>{item.name}</Text>
Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.detail}>ðŸ“˜ {item.currentBookTitle}</Text>
Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.detail}>ðŸ‘¥ {item.members.length} members</Text>
Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.score}>âœ… Match: {item.score}%</Text>
Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â />
Â Â Â Â </SafeAreaView>
Â Â );
}

// Styling for the recommendation screen
const styles = StyleSheet.create({
Â Â container: {
Â Â Â Â flex: 1,
Â Â Â Â backgroundColor: '#f1f0eb',
Â Â Â Â paddingHorizontal: 16,
Â Â Â Â paddingTop: 20,
Â Â },
Â Â loadingContainer: {
Â Â Â Â flex: 1,
Â Â Â Â justifyContent: 'center',
Â Â Â Â alignItems: 'center',
Â Â Â Â backgroundColor: '#f1f0eb',
Â Â },
Â Â title: {
Â Â Â Â fontSize: 22,
Â Â Â Â fontWeight: 'bold',
Â Â Â Â marginBottom: 12,
Â Â Â Â textAlign: 'center',
Â Â },
Â Â list: {
Â Â Â Â paddingBottom: 20,
Â Â },
Â Â card: {
Â Â Â Â backgroundColor: '#fff',
Â Â Â Â padding: 16,
Â Â Â Â marginVertical: 8,
Â Â Â Â borderRadius: 10,
Â Â Â Â shadowColor: '#000',
Â Â Â Â shadowOpacity: 0.08,
Â Â Â Â shadowOffset: { width: 0, height: 2 },
Â Â Â Â shadowRadius: 5,
Â Â Â Â elevation: 3,
Â Â },
Â Â clubName: {
Â Â Â Â fontSize: 18,
Â Â Â Â fontWeight: 'bold',
Â Â Â Â marginBottom: 4,
Â Â },
Â Â detail: {
Â Â Â Â fontSize: 14,
Â Â Â Â color: '#555',
Â Â },
Â Â score: {
Â Â Â Â marginTop: 6,
Â Â Â Â fontSize: 14,
Â Â Â Â color: '#333',
Â Â Â Â fontWeight: '600',
Â Â },
});